 1.    If it is a  jar file then -classpath should be -classpath -----.jar
 2.    If it is a class file then classpath should be location of directory of the file
 3.    If -classpath is used with javac or java or any tool then only the given value will be used neither env variable or not default - current working directory where command is executed
 4.    If -classpath is not used then only env variable will be preferred only not default
 5.    If env varible is not mentioned then only default option is available
 Note : whether file is found or not ( applicable for 3,4,5)
 
 
 
 
 
 
 
 
 Multiple specifications
To find class files in the directory C:\java\MyClasses as well as classes in C:\java\OtherClasses, you would set the class path to:

C:> java -classpath C:\java\MyClasses;C:\java\OtherClasses ...
    
Note that the two paths are separated by a semicolon.

Specification order
The order in which you specify multiple class path entries is important. The Java interpreter will look for classes in the directories in the order they appear in the class path variable. In the example above, the Java interpreter will first look for a needed class in the directory C:\java\MyClasses. Only if it doesn't find a class with the proper name in that directory will the interpreter look in the C:\java\OtherClasses directory.

 
 
 
 
java class_name
if classname is given with / or . then it is considered inside that package

java aniket.hello.op

class aniket.hello.op
{
}

jvm now search for aniket.hello.op class in the classpath/aniket/hello/
where op.class is stored and  inside the bytes code class have name aniket.hello.op




Note : Programmer can not use . symbol or / while defining a class name in source code
. or / is used by javac.  javac convert
package aniket;
class a
{

}

into
class aniket.a
{
}

For example in source code
class a.b
{

} // it is illegal bcz we can not use . or / for identifier

but in byte code
class a.b
{

} it is legal .

