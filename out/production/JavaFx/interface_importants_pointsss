https://www.javacodemonk.com/diamond-problem-of-inheritance-in-java-8-88faf6c9#:~:text=Java%208%20brought%20a%20major,while%20making%20this%20big%20change.&text=Any%20method%20inherited%20from%20a,method%20inherited%20from%20an%20interface


1.  Any method inherited from a class or a superclass is given higher priority over any default method inherited from an interface.
2.  Derived interfaces or sub-interfaces take higher precedence than the interfaces higher-up in the inheritance hierarchy.
3.  In case Rule 1 and Rule 2 are not able to resolve the conflict then the implementing class has to specifically override and provide a method with the same method definition.



=========================================================NOTE POINT 2 OF THE GIVEN LINK ================================
package Test;





interface d1
{
    default void hello()
    {
        System.out.println("d1");
    }
}
interface d12 extends d1
{
    default void hello()
    {
        System.out.println("d12");
    }
}
interface d3 extends d12
{

}
interface d4 extends d3
{
    default void hello()
    {
        System.out.println("d4");
    }
}
interface d5 extends d1
{

}
interface d7 extends d5{

}
interface d8 extends d6{

}
interface d6 extends d1
{

}


class TestClass implements d7,d8,d6,d5,d4,d1,d12
{
    public static void main(String args[])
    {
        new TestClass().hello();
    }
}
public class Check {

    public  static void main(String argc[])
    {

    }
}

=====================================================================================================================
IN INTERFACE ALL MEMBERS ARE PUBLIC BY DEFAULT BUT WE CAN MAKE PRIVATE METHODS NOT PRIVATE VARIABLE FOR PRIVATE METHODS IT IS COMPULSORY TO GIVE DEFINITION WE CAN NOT USE DEFAULT
KEYWORD WITH PRIVATE DEFAULT KEYWORD IS USED IF WE WANT TO GIVE DEFINITION IN INTERFACE DEFAULT KEYWORD IS ALLOWED ONLY IN INTERFACE . STATIC METHOD IN INTERFACE ALSO NEED TO BE DEFINED
DEFAULT KEYWORD CAN NOT BE USED WITH STATIC METHOD [ SAME LIKE PRIVATE WE HAVE DISCUSSED BEFORE BUT THIS FUNCTION IS PUBLIC BY DEFAULT]
=================================================================================================================================================
strictfp modifier is used to fix the floating point result over different platform . we can apply to any class and method that has definition
strictfp can be used with abstract class but not with abstract method
strictfp can also be applied on interface , enum , annotation definition
===============================================






class CLASS
{
  public   void hello()
    {
        System.out.println("CLASS");
    }
}


 interface A1
{

    default void hello()
    {
        System.out.println("INTERFACE ");
    }
}

class TestClass extends CLASS implements A1
{
    public static void main(String args[])
    {
        new TestClass().hello();
    }
}

//CORRECT OUTPUT IS CLASS [RULE 1]

=============================================================================================================================
package Test;
class CLASS
{
     void hello()
    {
        System.out.println("CLASS");
    }
}


 interface A1
{

    default void hello()
    {
        System.out.println("INTERFACE ");
    }
}

class TestClass extends CLASS implements A1
{
    public static void main(String args[])
    {
        new TestClass().hello();
    }
}
ERROR : -> BECAUSE AS WE KNOW ACCORDING TO RULE 1 [ CLASS HAS HIGHER PRIORITY ] SO IT WILL USE CLASS DEFINITION BY DEFAULT BUT IN INTERFACE METHOD IS PUBLIC AND IN CLASS IT IS DEFAULT SO  WE CAN NOT DOWNGRADE THE PREVILLAGE
SO FIRST OPTION IS MAKE FUNCTION PUBLIC IN CLASS OR OVERRIDE IT IN CLASS TestClass


==========================================================================================================================================================
interface can extends only another interface [ implements keyword can not be used in interface prototype ]
class can extends another class and implements interfaces
====================================================================================================











package Test;
interface  A2
{
     default void hello()
    {
        System.out.println("CLASS");
    }
}


 interface A1
{

    default void hello()
    {
        System.out.println("INTERFACE ");
    }
}
interface A3 extends A1{

}

class TestClass implements A3,A2
{
    public static void main(String args[])
    {
        new TestClass().hello();
    }
}
public class Check {

    public  static void main(String argc[])
    {

    }
}

// ERROR WE HAVE TO OVERRIDE in TestClass class



=====================================================


interface  A2
{
     default void hello()
    {
        System.out.println("CLASS");
    }
}


 interface A1 extends A2
{

    default void hello()
    {
        System.out.println("INTERFACE ");
    }
}
interface A3 extends A1{

}

class TestClass implements A3,A2
{
    public static void main(String args[])
    {
        new TestClass().hello();
    }
}
//CORRECT OUTPUT IS